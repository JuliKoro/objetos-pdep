import personajes.*
import arena.*

const personajes = [pamela, pocardo, tulipan, toro]

describe "Tests de Pamela" {
	test "Al luchar mano a mano contra un enemigo, la energía de Pamela subirá 400 puntos" {
		pamela.lucharContra(personajes.anyOne())
		
		assert.equals(6400, pamela.energia())
	}
	
	test "Luchar contra un equipo, la energía de Pamela subirá 400 puntos por cada contrincante" {
		const equipo = #{pocardo, tulipan}
		
		pamela.lucharContraEquipo(equipo)
		
		assert.equals(6800, pamela.energia())
	}
	
	test "Toro al combatir mano a mano, Pamela pierde el ultimo elemento si él no lo tiene" {
		toro.lucharContra(pamela)
		
		assert.equals("Cinta de papel", pamela.ultimoElemento())
		assert.equals(3, pamela.cantidadDeElementos())
	}
	
}

describe "Tests de Pocardo" {
	test "Al luchar mano a mano contra un enemigo, la energía de Pocardo subirá 500 puntos" {
		pocardo.lucharContra(personajes.anyOne())
		
		assert.equals(6100, pocardo.energia())
	}
	
	test "Luchar contra un equipo, la energía de Pocardo subirá 500 puntos por cada contrincante" {
		const equipo = #{pamela, toro}
		
		pocardo.lucharContraEquipo(equipo)
		
		assert.equals(6600, pocardo.energia())
	}
	
	test "Toro al combatir mano a mano, Pocardo pierde el ultimo elemento si él no lo tiene" {
		toro.lucharContra(pocardo)
		
		assert.equals("Curitas", pocardo.ultimoElemento())
		assert.equals(2, pocardo.cantidadDeElementos())
	}

}

describe "Tests de Tulipan" {
	test "Cuando está mano a mano con un enemigo, le hace perder el 50% de la energía" {
		const unOponente = personajes.anyOne()
		const energiaInicialOponente = unOponente.energia()
		tulipan.lucharContra(unOponente)
		
		assert.equals(energiaInicialOponente * 0.5, unOponente.energia())
	}
	
	test "Luchar contra un equipo, le hace perder el 50% de la energía a cada contrincante" {
		const equipo = #{pamela, toro}
		
		tulipan.lucharContraEquipo(equipo)
		
		assert.equals(6900, arena.energiaDeEquipo(equipo))
	}
	
	test "Toro al combatir mano a mano, Tulipan pierde el ultimo elemento si él no lo tiene" {
		toro.lucharContra(tulipan)
		
		assert.equals("Maceta", tulipan.ultimoElemento())
		assert.equals(3, tulipan.cantidadDeElementos())
	}
	
}

describe "Tests de El Toro" {
	test "Al cobatir mano a mano, quita 200 de energía por cada elemento que tengan sus contrincantes." {
		const unOponente = personajes.anyOne()
		const energiaInicialOponente = unOponente.energia()
		const tamanioInventarioOponente = unOponente.cantidadDeElementos()
		
		toro.sumarElemento("ElementoX")
		toro.lucharContra(unOponente)
		
		assert.equals(energiaInicialOponente - (200 * tamanioInventarioOponente), unOponente.energia())
	}
	
	test "Al combatir mano a mano, se queda con el último elemento en caso de no tenerlo" {
		const unOponente = personajes.anyOne()
		const ultimoElementoOponente = unOponente.ultimoElemento()
		
		toro.sumarElemento("ElementoX")
		toro.lucharContra(unOponente)
		
		assert.equals(ultimoElementoOponente, toro.ultimoElemento())
	}
	
	test "Al combatir mano a mano, no se queda con el último elemento en caso de tenerlo" {
		const unOponente = personajes.anyOne()
		
		toro.sumarElemento("ElementoX")
		toro.sumarElemento(unOponente.ultimoElemento())
		toro.lucharContra(unOponente)
		
		assert.equals(1, toro.cantidadDeElementos())
	}
	
	test "Luchar contra un equipo, le quita 200 de energia por elemento a cada oponente" {
		const equipo = #{pocardo, tulipan}
		
		toro.lucharContraEquipo(equipo)
		
		assert.equals(12600, arena.energiaDeEquipo(equipo))
	}
}

// los combates mano a mano entre personajes iguales simepre tiran mal los valores, ya que se hacen daño asi mismo